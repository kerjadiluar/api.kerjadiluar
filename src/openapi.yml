openapi: '3.0.3'
info:
  title: Kerjadiluar API Spec
  version: '1.0.0'
  description: Spesifikasi API untuk layanan Kerjadiluar.
servers:
  - url: http://localhost:8000/api
    description: Server lokal untuk pengembangan
  - url: https://api-kerjadiluar.vercel.app/api
    description: Server staging
tags:
  - name: Auth
    description: Operasi terkait autentikasi, login, dan registrasi.
  - name: User
    description: Operasi untuk mengelola data pengguna (akses admin).
  - name: Profile
    description: Operasi untuk mengelola data diri (profil) pengguna.

# ===============================================================
#  Reusable Components
# ===============================================================
components:
  schemas:
    # --- Model Objek Dasar ---
    Role:
      type: object
      properties:
        id:
          type: string
          example: 'rl1'
        name:
          type: string
          example: 'PENGGUNA'
    UserRoleRelation:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/Role'

    UserProfilePartial:
      type: object
      description: Representasi sebagian dari data diri pengguna, untuk disematkan.
      properties:
        whatsapp_number:
          type: string
          nullable: true
          example: '081234567890'
        location:
          type: string
          nullable: true
          example: 'Jakarta, Indonesia'
        date_of_birth:
          type: string
          format: date-time
          nullable: true
          example: '1995-08-17T00:00:00.000Z'
        last_education:
          type: string
          nullable: true
          example: 'S1 Teknik Informatika'
        profile_picture_url:
          type: string
          format: url
          nullable: true
          example: 'https://storage.example.com/images/users/clx123abc456/profile.jpg'

    UserPublic:
      type: object
      description: Representasi data user yang aman untuk ditampilkan, termasuk profil.
      properties:
        id:
          type: string
          example: 'clx123abc456'
        name:
          type: string
          example: 'Example User'
        email:
          type: string
          format: email
          example: 'user@example.com'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleRelation'
        profile:
          $ref: '#/components/schemas/UserProfilePartial'
          nullable: true

    UserProfile:
      type: object
      description: Representasi data diri lengkap seorang pengguna.
      properties:
        user_id:
          type: string
          example: 'clx123abc456'
        whatsapp_number:
          type: string
          nullable: true
          example: '081234567890'
        location:
          type: string
          nullable: true
          example: 'Jakarta, Indonesia'
        date_of_birth:
          type: string
          format: date-time
          nullable: true
          example: '1995-08-17T00:00:00.000Z'
        last_education:
          type: string
          nullable: true
          example: 'S1 Teknik Informatika'
        profile_picture_url:
          type: string
          format: url
          nullable: true
          example: 'https://storage.example.com/images/users/clx123abc456/profile.jpg'
        user:
          type: object
          properties:
            name:
              type: string
              example: 'Example User'
            email:
              type: string
              format: email
              example: 'user@example.com'

    # --- Request Bodies ---
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        loginType:
          type: string
          enum: ['main', 'backoffice']
          description: Opsional, akan ditentukan dari origin jika tidak ada.
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - roleId
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        roleId:
          type: string
          description: ID dari role yang akan diassign.
    UserUpdateRequest:
      type: object
      description: Body untuk memperbarui data user. Semua field opsional.
      properties:
        name:
          type: string
          description: Nama lengkap user.
        email:
          type: string
          format: email
          description: Alamat email user.
    ProfileUpdateRequest:
      type: object
      description: Body untuk memperbarui data diri pengguna. Semua field opsional.
      properties:
        whatsapp_number:
          type: string
        location:
          type: string
        date_of_birth:
          type: string
          format: date
          description: "Format: YYYY-MM-DD"
        last_education:
          type: string
        profile_picture_url:
          type: string
          format: url

    # --- Response Bodies ---
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT untuk request terotentikasi.
            user:
              $ref: '#/components/schemas/UserPublic'
    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          $ref: '#/components/schemas/UserPublic'
    UserListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserPublic'
    ProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          $ref: '#/components/schemas/UserProfile'
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Operasi berhasil dilakukan'

    # --- Error ---
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            message:
              type: string

  responses:
    BadRequest:
      description: '400 Bad Request. Data yang dikirim tidak valid.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: '401 Unauthorized. Token tidak valid atau tidak ada.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: '403 Forbidden. Anda tidak memiliki hak akses untuk sumber daya ini.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: '404 Not Found. Sumber daya yang diminta tidak ditemukan.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: '409 Conflict. Data yang dikirim sudah ada (misal: email duplikat).'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# ===============================================================
#  Paths
# ===============================================================
paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Registrasi user baru
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registrasi berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    delete:
      tags: [Auth]
      summary: Logout user
      description: Mencabut sesi user yang sedang aktif dengan menandai sesi sebagai 'revoked' di database, sehingga token menjadi tidak valid.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/google:
    get:
      tags: [Auth]
      summary: Memulai alur login dengan Google
      responses:
        '302':
          description: Redirect ke halaman autentikasi Google.
          headers:
            Location:
              schema:
                type: string

  /auth/google/callback:
    get:
      tags: [Auth]
      summary: Callback dari Google setelah autentikasi
      description: Endpoint ini akan menerima redirect dari Google dan mengembalikan token jika berhasil.
      responses:
        '200':
          description: Login dengan Google berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/me:
    get:
      tags: [Auth]
      summary: Mendapatkan profil user yang sedang login
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Berhasil mengambil data profil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # --- Profile Paths ---
  /profiles/me:
    get:
      tags: [Profile]
      summary: Mendapatkan data diri (profil) pengguna yang sedang login
      description: Mengambil detail profil lengkap dari pengguna yang terotentikasi. Jika profil belum ada, profil kosong akan dibuat secara otomatis.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Berhasil mengambil data profil.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags: [Profile]
      summary: Memperbarui data diri (profil) pengguna yang sedang login
      description: Memperbarui satu atau lebih field pada profil pengguna yang terotentikasi. Hanya field yang diisi yang akan diperbarui.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdateRequest'
      responses:
        '200':
          description: Profil berhasil diperbarui.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # --- User Paths (Admin Access) ---
  /users:
    get:
      tags: [User]
      summary: (Admin) Mendapatkan daftar semua user
      description: Mengambil daftar semua user beserta detail profil mereka. Memerlukan hak akses 'admin' atau 'manajer'.
      security:
        - BearerAuth: []
      parameters:
        - name: name
          in: query
          schema: { type: string }
          description: Filter berdasarkan nama user.
        - name: roleId
          in: query
          schema: { type: string }
          description: Filter berdasarkan ID role.
      responses:
        '200':
          description: Berhasil mengambil daftar user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/{id}:
    get:
      tags: [User]
      summary: (Admin) Mendapatkan data user spesifik berdasarkan ID
      description: Mengambil data lengkap seorang user, termasuk profilnya. Memerlukan hak akses 'admin' atau 'manajer'.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Berhasil mengambil data user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [User]
      summary: (Admin) Memperbarui data user berdasarkan ID
      description: Memperbarui nama atau email seorang user. Memerlukan hak akses 'admin' atau 'manajer'.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Berhasil memperbarui data user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [User]
      summary: (Admin) Menghapus user berdasarkan ID
      description: Menghapus seorang user dari sistem. Memerlukan hak akses 'admin' atau 'manajer'.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: User berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'